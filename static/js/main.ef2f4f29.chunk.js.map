{"version":3,"sources":["beep.mp3","reducers.js","components/SelectionScreen.js","components/TimeInput.js","components/ConstantDoneButton.js","components/ConstantTime.js","components/ConstantTimeCountdown.js","components/BreakChoice.js","components/BreakType.js","components/BreakInput.js","components/VariableInterval.js","components/VariableDoneButton.js","components/VariableIntervalNext.js","components/BreaksList.js","actions.js","constants.js","App.js","serviceWorker.js","index.js","beepDone.mp3"],"names":["module","exports","viewType","timerType","constantDuration","intervals","countdownStarted","breaksCondition","breaksType","breakTime","SelectionScreen","setTimerType","className","role","aria-label","type","onClick","TimeInput","id","aria-describedby","ConstantDoneButton","getConstantInfo","setCountdownStart","countdown","ConstantTime","entries","idValue","index","ConstantTimeCountdown","constantInterval","constantDurationState","changeDisplay","breakRoundCounter","title","timeDisplay","isNaN","roundCounter","style","display","BreakChoice","setBreaksCondition","class","BreakType","setBreaksType","setIntervalsForCustomBreak","BreakInput","breakId","VariableInterval","testArray","i","push","key","VariableDoneButton","getVariableInfo","toggleFirstVariableNext","useSound","beep","VariableIntervalNext","getVariableIntervalTimes","BreaksList","console","log","breakList","setBreakTime","breakType","payload","App","props","duration","setConstantDuration","setIntervals","parseFloat","document","getElementById","value","setState","prevState","constantDurationArray","firstVariableNext","constantDurationArrayPlaceHolder","getBreakInfo","breaks","breakTimes","state","j","breaksArray","length","myInterval","sound","Audio","setInterval","play","clearInterval","breakCountdown","beepDone","breakInterval","variableInterval","variableDurationArray","timeInput","constantDoneButton","constantTime","constantTimeCountdown","breakChoice","breaksTypeComp","breakInput","variableDoneButton","variableIntervalNext","this","setViewType","Component","connect","updateViewType","updateTimerType","updateConstantDuration","updateIntervals","updateCountdownStart","updateBreaksCondition","updateBreaksType","updateBreakTime","dispatch","countdownStart","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef2f4f29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.d932c606.mp3\";","import { \n\tCHANGE_VIEW_TYPE,\n\tCHANGE_TIMER_TYPE,\n\tCHANGE_CONSTANT_DURATION,\n\tCHANGE_INTERVALS,\n\tCOUNTDOWN_STARTED,\n\tBREAKS_CONDITION,\n\tBREAKS_TYPE\n} from './constants.js'\n\nconst viewType = {\n\tviewType: 'homePage'\n}\n\nconst timerType = {\n\ttimerType: ''\n}\n\nconst constantDuration = {\n\tconstantDuration: 0\n}\n\nconst intervals = {\n\tintervals: 0\n}\n\nconst countdownStarted = {\n\tcountdownStarted: false\n}\n\nconst breaksCondition = {\n\tbreaksCondition: false\n}\n\nconst breaksType = {\n\tbreaksType: ''\n}\n\nconst breakTime = {\n\tbreakTime: false\n}\nexport const updateViewType = (state=viewType, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_VIEW_TYPE:\n\t\t\treturn Object.assign({}, state, { viewType: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const updateTimerType = (state=timerType, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_TIMER_TYPE:\n\t\t\treturn Object.assign({}, state, { timerType: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const updateConstantDuration = (state=constantDuration, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_CONSTANT_DURATION:\n\t\t\treturn Object.assign({}, state, { constantDuration: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const updateIntervals = (state=intervals, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_INTERVALS:\n\t\t\treturn Object.assign({}, state, { intervals: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const updateCountdownStart = (state=countdownStarted, action={}) => {\n\tswitch(action.type) {\n\t\tcase COUNTDOWN_STARTED:\n\t\t\treturn Object.assign({}, state, { countdownStarted: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const updateBreaksCondition = (state=breaksCondition, action={}) => {\n\tswitch(action.type) {\n\t\tcase BREAKS_CONDITION:\n\t\t\treturn Object.assign({}, state, { breaksCondition: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const updateBreaksType = (state=breaksType, action={}) => {\n\tswitch(action.type) {\n\t\tcase BREAKS_TYPE:\n\t\t\treturn Object.assign({}, state, { breaksType: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const updateBreakTime = (state=breakTime, action={}) => {\n\tswitch(action.type) {\n\t\tcase BREAKS_TYPE:\n\t\t\treturn Object.assign({}, state, { breakTime: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n\n\n\n\n\n","import React from 'react'\n\nconst SelectionScreen = ({ setTimerType }) => {\n\treturn (\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"tc\">Please select a timer type</h1>\n\t\t\t<div className=\"btn-group mr5\" role=\"group\" aria-label=\"Basic example\">\n \t\t\t\t<button type=\"button\" className=\"btn btn-secondary pl\" onClick={() => setTimerType('constant')}>Constant</button>\n\t\t\t</div>\n\t\t\t<div className=\"btn-group ml5\" role=\"group\" aria-label=\"Basic example\">\n \t\t\t\t<button type=\"button\" className=\"btn btn-secondary pl\" onClick={() => setTimerType('variable')}>Variable</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default SelectionScreen","import React from 'react'\n\nconst TimeInput = () => {\n\treturn (\n\t\t<div className=\"input-group input-group-lg\">\n  \t\t\t<div className=\"input-group-prepend\">\n    \t\t\t<span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">Enter Number of Intervals</span>\n  \t\t\t</div>\n  \t\t\t<input type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-lg\" id=\"intervals\"/>\n\t\t</div>\n\t)\n}\n\nexport default TimeInput;","import React from 'react';\nimport useSound from 'use-sound';\nimport beep from '../beep.mp3'\n\nconst ConstantDoneButton = ({ getConstantInfo, setCountdownStart, countdown }) => {\n\treturn (\n\t\t<div className=\"tc mv4\">\n\t\t\t<div className=\"btn-group ml5\" role=\"group\" aria-label=\"Basic example\" >\n\t \t\t\t<button type=\"button\" className=\"btn btn-secondary pl\" onClick={() => {getConstantInfo(); setCountdownStart(true)}}>Start</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n  \t\n}\n\nexport default ConstantDoneButton","import React from 'react';\n\nconst ConstantTime = ({ entries, timerType, index }) => {\n\tlet idValue\n\tif (timerType === 'constant') {\n\t\tidValue = 'constantDuration'\n\t} else {\n\t\tidValue = `variable${index}`\n\t}\n\treturn (\n\t\t<div className=\"input-group input-group-lg\">\n  \t\t\t<div className=\"input-group-prepend\">\n    \t\t\t<span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">Enter Duration per Interval</span>\n  \t\t\t</div>\n  \t\t\t<input type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-lg\" id={idValue}/>\n\t\t</div>\n\t)\n}\n\nexport default ConstantTime\n","import React, { Component } from 'react'\nimport beepDone from '../beepDone.mp3'\n\nconst ConstantTimeCountdown = ({ constantInterval, constantDurationState, countdown, breakTime, changeDisplay, breakRoundCounter, intervals }) => {\n\tlet title = changeDisplay()\n\tlet timeDisplay = constantDurationState\n\tif (title === \"Seconds left for break\") {\n\t\ttimeDisplay = breakRoundCounter\n\t}\n\tif (isNaN(timeDisplay)) {\n\t\ttimeDisplay = 'Done'\n\t}\n\t\n\tlet roundCounter = intervals - constantInterval + 1\n\n\tif (roundCounter > intervals) {\n\t\troundCounter = intervals\n\t\t/*\n\t\tvar sound = new Audio(beepDone)\n\t\tsound.play()\n\t\tconsole.log('done')\n\t\t*/\n\t}\n\t\n\treturn (\n\t\t<div className=\"tc\">\n\t\t\t<h1 style={{display: \"inline\"}}>Begin Meditating &nbsp; &nbsp; | &nbsp; &nbsp; </h1>\n\t\t\t<h2 style={{display: \"inline\"}}>Rounds left: </h2>\n\t\t\t<h2 style={{display: \"inline\"}}>{roundCounter}/{intervals}  &nbsp; &nbsp; | &nbsp; &nbsp; </h2>\n\t\t\t<h2 style={{display: \"inline\"}}>{title}: </h2>\n\t\t\t<h2 style={{display: \"inline\"}}>{timeDisplay}</h2>\n\t\t</div>\n\t)\n}\n\nexport default ConstantTimeCountdown","import React from 'react';\n\nconst BreakChoice = ({ setBreaksCondition }) => {\n\treturn (\n\t\t<div>\n\t\t\t<h2 style={{display: \"inline\"}}>Would you like any breaks?</h2>\n\t\t\t<button type=\"button\" class=\"btn btn-secondary\" onClick={() => setBreaksCondition(true)}>Yes</button>\n\t\t\t<button type=\"button\" class=\"btn btn-secondary\" onClick={() => setBreaksCondition(false)}>No</button>\n\t\t</div>\n\t)\n}\n\n\nexport default BreakChoice","import React from 'react'\n\nconst BreakType = ({ setBreaksType, setIntervalsForCustomBreak }) => {\n\treturn (\n\t\t<div>\n\t\t\t<button type=\"button\" class=\"btn btn-secondary\" onClick={() => setBreaksType('constant')}>Consant Break Time</button>\n\t\t\t<button type=\"button\" class=\"btn btn-secondary\" onClick={() => {setBreaksType('custom'); setIntervalsForCustomBreak()}}>Custom Break Time</button>\n\t\t</div>\n\t)\n}\n\nexport default BreakType","import React from 'react'\n\nconst BreakInput = ({ breaksType, index }) => {\n\tlet breakId\n\tif (breaksType === 'constant') {\n\t\tbreakId = 'breakDuration'\n\t} else {\n\t\tbreakId = `break${index}`\n\t}\n\treturn (\n\t\t<div className=\"input-group input-group-lg\">\n  \t\t\t<div className=\"input-group-prepend\">\n    \t\t\t<span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">Enter Break Duration</span>\n  \t\t\t</div>\n  \t\t\t<input type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-lg\" id={breakId}/>\n\t\t</div>\n\t)\n}\n\nexport default BreakInput","import React from 'react'\nimport ConstantTime from './ConstantTime'\n\nconst  VariableInterval= ({ intervals }) => {\n\tlet testArray = []\n\tfor (let i = 0; i < intervals; i++) {\n\t\ttestArray.push(<ConstantTime key={i} index={i}/>)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{testArray}\n\t\t</div>\n\t)\n}\n\nexport default VariableInterval","import React from 'react';\nimport useSound from 'use-sound';\nimport beep from '../beep.mp3'\n\nconst VariableDoneButton = ({ getVariableInfo, toggleFirstVariableNext }) => {\n\tconst [play] = useSound(beep)\n\treturn (\n\t\t<div className=\"tc mv4\">\n\t\t\t<div className=\"btn-group ml5\" role=\"group\" aria-label=\"Basic example\">\n\t \t\t\t<button type=\"button\" className=\"btn btn-secondary pl\" onClick={() => {getVariableInfo(); toggleFirstVariableNext()}}>Next</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n  \t\n}\n\nexport default VariableDoneButton","import React from 'react';\n\nconst VariableIntervalNext = ({ getVariableIntervalTimes, setCountdownStart }) => {\n\treturn (\n\t\t<div className=\"tc mv4\">\n\t\t\t<div className=\"btn-group ml5\" role=\"group\" aria-label=\"Basic example\">\n\t \t\t\t<button type=\"button\" className=\"btn btn-secondary pl\" onClick={() => {getVariableIntervalTimes(); setCountdownStart(true)}}>Next</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n  \t\n}\n\nexport default VariableIntervalNext","import React from 'react'\nimport BreakInput from './BreakInput'\n\nconst BreaksList = ({ intervals }) => {\n\tconsole.log(intervals)\n\tlet breakList = []\n\tfor (let i = 0; i < intervals; i++) {\n\t\tbreakList.push(<BreakInput breaksType='custom' index={i} key={i} />)\n\t}\n\treturn (\n\t\t<div>\n\t\t\t{breakList}\n\t\t</div>\n\t)\n}\n\nexport default BreaksList\n","import { \n\tCHANGE_VIEW_TYPE,\n\tCHANGE_TIMER_TYPE,\n\tCHANGE_CONSTANT_DURATION,\n\tCHANGE_INTERVALS, \n\tCOUNTDOWN_STARTED,\n\tBREAKS_CONDITION,\n\tBREAKS_TYPE,\n\tBREAK_TIME\n} from './constants.js'\n\nexport const setViewType = (viewType) => {\n\treturn {\n\t\ttype: CHANGE_VIEW_TYPE,\n\t\tpayload: viewType\n\t}\n}\n\nexport const setTimerType = (timerType) => {\n\treturn {\n\t\ttype: CHANGE_TIMER_TYPE,\n\t\tpayload: timerType\n\t}\n}\n\nexport const setConstantDuration = (duration) => {\n\treturn {\n\t\ttype: CHANGE_CONSTANT_DURATION,\n\t\tpayload: duration\n\t}\n}\n\nexport const setIntervals = (intervals) => {\n\treturn {\n\t\ttype: CHANGE_INTERVALS,\n\t\tpayload: intervals\n\t}\n}\n\nexport const setCountdownStart = (countdownStarted) => {\n\treturn {\n\t\ttype: COUNTDOWN_STARTED,\n\t\tpayload: countdownStarted\n\t}\n}\n\nexport const setBreaksCondition = (breaksCondition) => {\n\treturn {\n\t\ttype: BREAKS_CONDITION,\n\t\tpayload: breaksCondition\n\t}\n}\n\nexport const setBreaksType = (breakType) => {\n\treturn {\n\t\ttype: BREAKS_TYPE,\n\t\tpayload: breakType\n\t}\n}\n\nexport const setBreakTime = (breakType) => {\n\treturn {\n\t\ttype: BREAKS_TYPE,\n\t\tpayload: breakType\n\t}\n}\n\n\n\n\n\n\n","export const CHANGE_VIEW_TYPE = 'CHANGE_VIEW_TYPE'\nexport const CHANGE_TIMER_TYPE = 'CHANGE_TIMER_TYPE';\nexport const CHANGE_CONSTANT_DURATION = 'CHANGE_CONSTANT_DURATION'\nexport const CHANGE_INTERVALS = 'CHANGE_INTERVALS';\nexport const COUNTDOWN_STARTED = false;\nexport const BREAKS_CONDITION = 'BREAKS_CONDITION'\nexport const BREAKS_TYPE = \"BREAKS_TYPE\"\nexport const BREAK_TIME = \"BREAK_TIME\"","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport useSound from 'use-sound';\nimport beep from './beep.mp3'\nimport SelectionScreen from './components/SelectionScreen'\nimport TimeInput from './components/TimeInput'\nimport ConstantDoneButton from './components/ConstantDoneButton'\nimport ConstantTime from './components/ConstantTime'\nimport ConstantTimeCountdown from './components/ConstantTimeCountdown'\nimport BreakChoice from './components/BreakChoice'\nimport BreakType from './components/BreakType'\nimport BreakInput from './components/BreakInput'\nimport VariableInterval from './components/VariableInterval'\nimport VariableDoneButton from './components/VariableDoneButton'\nimport VariableIntervalNext from './components/VariableIntervalNext'\nimport BreaksList from './components/BreaksList'\nimport beepDone from './beepDone.mp3'\nimport './App.css';\n\nimport { setViewType, setTimerType, setConstantDuration, setIntervals, setCountdownStart, setBreaksCondition, setBreaksType, setBreakTime } from './actions'\n\nconst mapStateToProps = state => {\n  return {\n    viewType: state.updateViewType.viewType,\n    timerType: state.updateTimerType.timerType,\n    constantDuration: state.updateConstantDuration.constantDuration,\n    intervals: state.updateIntervals.intervals,\n    countdownStarted: state.updateCountdownStart.countdownStarted,\n    breaksCondition: state.updateBreaksCondition.breaksCondition,\n    breaksType: state.updateBreaksType.breaksType,\n    breakTime: state.updateBreakTime.breakTime\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setViewType: (viewType) => dispatch(setViewType(viewType)),\n    setTimerType: (timerType) => dispatch(setTimerType(timerType)),\n    setConstantDuration: (duration) => dispatch(setConstantDuration(duration)),\n    setIntervals: (intervals) => dispatch(setIntervals(intervals)),\n    setCountdownStart: (countdownStart) => dispatch(setCountdownStart(countdownStart)),\n    setBreaksCondition: (breaksCondition) => dispatch(setBreaksCondition(breaksCondition)),\n    setBreaksType: (breaksType) => dispatch(setBreaksType(breaksType)),\n    setBreakTime: (breakTime) => dispatch(setBreakTime(breakTime))\n  }\n}\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props) \n    this.state = {\n      constantDurationState: 0,\n      constantInterval: 0,\n      constantDurationArray: [],\n      breakTime: false,\n      breakRoundCounter: 0,\n      variableInterval: 0,\n      variableDurationArray: [],\n      firstVariableNext: false\n    }\n  }\n\n  getConstantInfo = () => {\n    const { setConstantDuration, setIntervals, constantDuration, timerType } = this.props\n    let intervals = parseFloat(document.getElementById('intervals').value)\n    let duration\n    if (timerType === 'constant') {\n      duration = parseFloat(document.getElementById('constantDuration').value)\n      setConstantDuration(duration)\n    }\n    setIntervals(intervals)\n    if (timerType === 'constant') {\n      this.setState({ constantDurationState: duration})\n      for (let i = 0; i < intervals; i++) {\n      //this.setState({ constantDurationArray: this.state.constantDurationArray.push(duration) })\n        this.setState(prevState => ({\n         constantDurationArray: [...prevState.constantDurationArray, duration]\n       }))\n      } \n    } \n    if (timerType === 'constant') {\n      this.setState({ constantInterval: intervals }, this.countdown)\n    } else {\n      this.setState({ constantInterval: intervals})\n    }\n  }\n\n  setIntervalsForCustomBreak = () => {\n    const { setIntervals } = this.props\n    let intervals = parseFloat(document.getElementById('intervals').value)\n    setIntervals(intervals)\n  }\n\n  toggleFirstVariableNext = () => {\n    this.setState({ firstVariableNext: true })\n  }\n\n  getVariableIntervalTimes = () => {\n    const { intervals } = this.props\n    let constantDurationArrayPlaceHolder = []\n    for(let i = 0; i < intervals; i++) {\n      let duration = parseFloat(document.getElementById(`variable${i}`).value)\n      constantDurationArrayPlaceHolder.push(duration)\n    }\n    this.setState({ constantDurationArray: constantDurationArrayPlaceHolder}, this.countdown)\n  }\n\n  getBreakInfo = () => {\n   const { breaksType, intervals } = this.props\n   let breaks\n   if (breaksType === 'constant') {\n    let breakTimes = parseFloat(document.getElementById('breakDuration').value)\n    setBreakTime(breakTimes)\n    breaks = []\n    for (let i = 0; i < this.state.constantInterval; i++) {\n      breaks.push(breakTimes);\n    }\n   } else {\n    breaks = []\n      for (let j = 0; j < intervals; j++) {\n        let breakTimes = parseFloat(document.getElementById(`break${j}`).value)\n        breaks.push(breakTimes)\n      }\n   }\n    this.setState({ breaksArray: breaks})\n    return breaks;\n  }\n\n  render() {\n    const { viewType, \n            timerType, \n            constantDuration, \n            intervals, \n            setViewType, \n            setTimerType, \n            countdownStarted, \n            setCountdownStart, \n            breaksCondition, \n            setBreaksCondition,\n            setBreaksType,\n            breaksType}  = this.props\n\n    let timeInput, \n        constantDoneButton, \n        constantTime, \n        constantTimeCountdown, \n        breakChoice, \n        breaksTypeComp, \n        breakInput, \n        variableInterval, \n        variableDoneButton,\n        variableIntervalNext\n\n    if (timerType) {\n      timeInput = <TimeInput />\n    }\n\n    if (timerType === 'constant') {\n      constantTime = <ConstantTime timerType={timerType}/>\n      constantDoneButton = <ConstantDoneButton getConstantInfo={this.getConstantInfo} setCountdownStart={setCountdownStart}/>\n      breakChoice = <BreakChoice setBreaksCondition={setBreaksCondition}/>\n    }\n\n    if (timerType === 'variable') {\n      // getConstantInfo sets the number of intervals and in turn variableInterval gets called to list all of the duration\n      // input selections, toggleFirstVariableNext tells the site that the first next button has been clicked and that the next button \n      // for entering variable interval durations can be shown\n      variableDoneButton = <VariableDoneButton getVariableInfo={this.getConstantInfo} toggleFirstVariableNext={this.toggleFirstVariableNext}/>\n      variableInterval = <VariableInterval intervals={intervals}/>\n      breakChoice = <BreakChoice setBreaksCondition={setBreaksCondition}/>\n    }\n\n    if (this.state.firstVariableNext) {\n      variableIntervalNext = <VariableIntervalNext getVariableIntervalTimes={this.getVariableIntervalTimes} setCountdownStart={setCountdownStart}/>\n    }\n    \n    if (breaksCondition) {\n      breaksTypeComp = <BreakType setBreaksType={setBreaksType} setIntervalsForCustomBreak={this.setIntervalsForCustomBreak}/>\n    }\n\n    if (countdownStarted) {\n      constantTimeCountdown = <ConstantTimeCountdown  constantInterval={this.state.constantInterval} \n                                                      constantDurationState={this.state.constantDurationState} \n                                                      breakTime={this.breakTime} \n                                                      changeDisplay={this.changeDisplay}\n                                                      breakRoundCounter={this.state.breakRoundCounter}\n                                                      intervals={intervals} />\n    }\n\n    if (breaksType === 'constant') {\n      breakInput = <BreakInput breaksType={breaksType} />\n    } else if (breaksType === 'custom') { \n      breakInput = <BreaksList intervals={intervals}/>\n    }\n\n    return (\n      <div>\n        <SelectionScreen setTimerType={setTimerType} />\n        {timeInput}\n        \n        {constantTime}\n        \n        {variableDoneButton}\n        {variableInterval}\n        \n        {breakChoice}\n        {breaksTypeComp}\n        {breakInput}\n        {constantDoneButton}\n\n        {variableIntervalNext}\n        {constantTimeCountdown}\n      </div>\n    )\n  }\n\nchangeDisplay = () => {\n  if (this.state.breakTime) {\n    return \"Seconds left for break\"\n  }\n  return \"Seconds left in current round\"\n}\ncountdown = () => {\n  const { breaksCondition, constantDuration, breaksType } = this.props\n  this.setState({ constantDurationState: this.state.constantDurationArray[this.state.constantDurationArray.length - this.state.constantInterval ]})\n  var sound = new Audio(beep)\n  let breaksArray\n  if (document.getElementById('breakDuration') !== null || breaksType === 'custom') {\n    breaksArray = this.getBreakInfo()\n  }\n  this.setState({ breakTime: false })\n  \n  console.log('here at countdown')\n  let myInterval;\n  myInterval = setInterval(() => {\n    if (this.state.constantDurationState !== 0 && this.state.constantInterval >= 0) {\n      this.setState({ constantDurationState: this.state.constantDurationState - 1 })  \n    } else {\n      if (this.state.constantInterval >= 0) {\n        if (breaksCondition) {\n          this.setState({ breakTime: true })\n        }\n        this.setState({ constantInterval: this.state.constantInterval - 1 })\n        if (this.state.constantInterval !== 0) {\n          sound.play()\n        }\n        if (breaksCondition) {\n          clearInterval(myInterval)\n          this.setState({ breakRoundCounter: breaksArray[breaksArray.length - this.state.constantInterval - 1]}, \n                          this.breakCountdown)\n        } else {\n          this.setState({ constantDurationState: this.state.constantDurationArray[this.state.constantDurationArray.length - this.state.constantInterval ]})\n        }\n      } \n    }if (this.state.constantInterval === 0) {\n      var soundDone = new Audio(beepDone)\n      soundDone.play()\n      this.setState({ constantInterval: this.state.constantInterval - 1})\n    }\n  }, 1000)\n  }\n\n  breakCountdown = () => {\n    const { constantDuration, breakTime } = this.props\n    let breakInterval\n     breakInterval = setInterval(() => {\n      this.setState({ breakRoundCounter: this.state.breakRoundCounter - 1})\n      if (this.state.breakRoundCounter === -1 && this.state.constantInterval >= 0) {\n        clearInterval(breakInterval)\n        this.setState({ constantDurationState: constantDuration}, this.countdown)\n      }\n    }, 1000)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport { \tupdateViewType, \n\t\t\tupdateTimerType, \n\t\t\tupdateConstantDuration, \n\t\t\tupdateIntervals, \n\t\t\tupdateCountdownStart, \n\t\t\tupdateBreaksCondition,\n\t\t\tupdateBreaksType,\n\t\t\tupdateBreakTime } from './reducers'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ \tupdateViewType, \n\t\t\t\t\t\t\t\t\t\tupdateTimerType, \n\t\t\t\t\t\t\t\t\t\tupdateConstantDuration, \n\t\t\t\t\t\t\t\t\t\tupdateIntervals,\n\t\t\t\t\t\t\t\t\t\tupdateCountdownStart, \n\t\t\t\t\t\t\t\t\t\tupdateBreaksCondition,\n\t\t\t\t\t\t\t\t\t\tupdateBreaksType,\n\t\t\t\t\t\t\t\t\t\tupdateBreakTime })\nconst store = createStore(rootReducer, applyMiddleware(logger)) \nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>\n    \t<App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/beepDone.d6040c63.mp3\";"],"sourceRoot":""}